"""
Problem #: 44

https://projecteuler.net/problem=44

Pentagon Numbers

Pentagonal numbers are generated by the formula, p=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

Answer = 5482660

"""
p = [int(n * (3 * n - 1) / 2) for n in range(1, 10000)]
d = []

for i in range(0, len((p))):
    for j in range(i + 1, len((p))):
        if p[i] + p[j] in p:
            d.append(sorted([p[i], p[j]]))
        h = abs(p[i] - p[j])
        if h in p:
            s = sorted([p[i], p[j]])
            try:
                next(x for x in d if x == s)
                print(f" answer =  {abs(s[0]-s[1])}")
                break
            except:
                pass

"""
def get_D():
    from math import sqrt

    P = lambda n: n * (3 * n - 1) // 2  # pentagonal number

    p = 1           # let D = p(3p-1)/2
    while True:     # loop for p = 1, 2...
        D = P(p)        # difference P(k) - P(j)
        m, j = 1, 1     # initial m; j can be any >= 1, to enter while loop
        while j >= 1:   # loop for m = 1, 2..., exit if j<1
            j = (D - P(m)) / (3 * m)
            if j >= 1 and j.is_integer():
                # j is Natural, so check S = P(k) + P(j) to be pentagonal
                S = 2 * P(j) + D
                q = (1 + sqrt(1 + 24 * S)) / 6  # let S = q(3q-1)/2
                if q.is_integer():
                    # q is Natural, so that is the result
                    return D
            m += 1
        p += 1


print(get_D())

----------------------------------------------------------------------------------------
ls = []
for i in range(1000, 10000):
	ls.append(((3 * i - 1) * i) / 2)

for i in ls:
	for j in ls:
		if i + j in ls and abs(i - j) in ls:
			print(abs(i - j), i, j)
			break
-------------------------------------------------------------------------------------
from time import time

start = time()
pentagonals = set()
n = 0
diff = 0
while(True):
   n += 1
   p = n*(3*n-1)//2
   for num1 in pentagonals:
      num2 = p - num1
      if num2 in pentagonals:
         diff = abs(num1 - num2)
         if diff in pentagonals:
            break
   else:
      pentagonals.add(p)
      continue
   break
end = time()
print(diff)
print(end-start,"seconds")

"""
